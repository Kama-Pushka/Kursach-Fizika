on_actions = {
	on_startup = {
		effect = {
			set_variable = { global.troz_threat_var = 0 }

			set_global_flag = { flag = nw_drop_focus_tree value = 1 days = 2 }
			### INFRA IN STATE BONUS
			#every_state = {
			#	limit = {
			#		OR = {
			#			state = 1088 state = 1097 state = 72 state = 766 state = 1037 state = 821 state = 820 state = 118 state = 1042 state = 1066 state = 822 state = 819 state = 823 state = 904 state = 102 state = 907 state = 906 state = 163 state = 815 state = 814 state = 801 state = 802
			#		}
			#	}
			#	set_variable = { state_infra_var = 0.75 }
			#	set_variable = { state_infra_half_var = 0.375 }
			#	add_dynamic_modifier = { modifier = infra_in_state_dyn }
			#	force_update_dynamic_modifier = yes
			#}
			#every_state = {
			#	limit = {
			#		OR = {
			#			state = 1002 state = 1001 state = 1111 state = 1120 state = 188 state = 770 state = 764 state = 765 state = 145 state = 974 state = 1038 state = 1061 state = 973 state = 116 state = 858 state = 847 state = 80 state = 838 state = 818 state = 77 state = 341 state = 964 state = 945 state = 1075 state = 940 state = 799 state = 997 state = 989 state = 817 state = 972 state = 895 state = 971 state = 967 state = 966 state = 969 state = 965 state = 798 state = 768 state = 937 state = 1029 state = 779 state = 12 state = 977 state = 1102
			#		}
			#	}
			#	set_variable = { state_infra_var = 0.5 }
			#	set_variable = { state_infra_half_var = 0.25 }
			#	add_dynamic_modifier = { modifier = infra_in_state_dyn }
			#	force_update_dynamic_modifier = yes
			#}
			#every_state = {
			#	limit = {
			#		OR = {
			#			state = 1105 state = 1109 state = 124 state = 35 state = 975 state = 811 state = 905 state = 103 state = 845 state = 783 state = 780 state = 772 state = 183 state = 1153 state = 979 state = 656 state = 773 state = 804 state = 87 state = 825 state = 212 state = 1026 state = 184 state = 782 state = 894 state = 837 state = 988 state = 990 state = 807 state = 813 state = 856 state = 187 state = 1025 state = 164 state = 1100 state = 553 state = 1101 state = 961 state = 1093 state = 701
			#		}
			#	}
			#	set_variable = { state_infra_var = 0.25 }
			#	set_variable = { state_infra_half_var = 0.125 }
			#	add_dynamic_modifier = { modifier = infra_in_state_dyn }
			#	force_update_dynamic_modifier = yes
			#}
			#every_state = {
			#	limit = {
			#		OR = {
			#			state = 100 state = 408 state = 409 state = 657 state = 561 state = 666 state = 863 state = 585 state = 584 state = 407 state = 957 state = 329 state = 565 state = 563 state = 376 state = 377 state = 393 state = 276 state = 1086 state = 331 state = 1083 state = 1082 state = 1081 state = 1079 state = 1085 state = 1138 state = 901 state = 271 state = 1080 state = 550 state = 269 state = 547 state = 295 state = 1065 state = 542 state = 681 state = 719 state = 272 state = 755 state = 607 state = 620 state = 602 state = 600 state = 598 state = 596 state = 595 state = 593 state = 599 state = 594 state = 524 state = 527 state = 539 state = 521 state = 285 state = 519 state = 520 state = 723 state = 924 state = 468 state = 487 state = 499 state = 496 state = 505 state = 792 state = 172 state = 680 state = 416 state = 411 state = 414 state = 1188 state = 410 state = 412 state = 425 state = 424 state = 427 state = 436 state = 438 state = 433 state = 440 state = 640 state = 670 state = 671 state = 672 state = 334 state = 669 state = 482 state = 483 state = 484 state = 456 state = 769 state = 797 state = 1115 state = 293 state = 343 state = 348 state = 350 state = 352 state = 786 state = 344 state = 837 state = 106 state = 185 state = 47 state = 148 state = 587 state = 402 state = 1118 state = 1049
			#		}
			#	}
			#	set_variable = { state_infra_var = -0.25 }
			#	set_variable = { state_infra_half_var = -0.125 }
			#	add_dynamic_modifier = { modifier = infra_in_state_dyn }
			#	force_update_dynamic_modifier = yes
			#}
			#every_state = {
			#	limit = {
			#		OR = {
			#			state = 637 state = 886 state = 915 state = 887 state = 718 state = 538 state = 506 state = 567 state = 574 state = 575 state = 576 state = 577 state = 580 state = 581 state = 214 state = 215 state = 213 state = 144 state = 404 state = 956 state = 330 state = 955 state = 954 state = 953 state = 330 state = 930 state = 375 state = 378 state = 380 state = 388 state = 473 state = 470 state = 469 state = 682 state = 467 state = 466 state = 1060 state = 663 state = 662 state = 661 state = 1068 state = 699 state = 556 state = 557 state = 1011 state = 1012 state = 928 state = 1013 state = 1019 state = 549 state = 767 state = 1051 state = 559 state = 830 state = 1114 state = 541 state = 1110 state = 983 state = 544 state = 543 state = 660 state = 1005 state = 549 state = 1006 state = 558 state = 323 state = 1104 state = 902 state = 434 state = 280 state = 929 state = 998 state = 292 state = 679 state = 944 state = 1119 state = 1170
			#		}
			#	}
			#	set_variable = { state_infra_var = -0.5 }
			#	set_variable = { state_infra_half_var = -0.25 }
			#	add_dynamic_modifier = { modifier = infra_in_state_dyn }
			#	force_update_dynamic_modifier = yes
			#}
			#every_state = {
			#	limit = {
			#		OR = {
			#			state = 262 state = 463 state = 911 state = 379 state = 1087 state = 101 state = 453 state = 1067 state = 757 state = 758 state = 601 state = 833 state = 324 state = 674 state = 495 state = 675 state = 457 state = 1054 state = 1116
			#			impassable = yes
			#		}
			#	}
			#	set_variable = { state_infra_var = -1 }
			#	set_variable = { state_infra_half_var = -0.5 }
			#	add_dynamic_modifier = { modifier = infra_in_state_dyn }
			#	force_update_dynamic_modifier = yes
			#}
			
			every_state = {
				limit = {
					is_on_continent = europe
					NOT = { is_core_of = SOV }
				}
				add_state_modifier = {
					modifier = {
						europe_state_modifiers = 1
					}
				}
			}
			
			every_state = {
				limit = {
					OR = {
						state = 991 state = 960 state = 958 state = 959 state = 938 state = 293 state = 853 state = 854 state = 855 state = 851 state = 797 state = 769 state = 678 state = 679 state = 292 state = 1115 state = 1116 state = 1073 state = 417 state = 421 state = 413 state = 995 state = 962 state = 675 state = 656 state = 455 state = 291 state = 1053 state = 1054 state = 998 state = 680 state = 945 state = 961 state = 554 state = 1100 state = 1101 state = 1108 state = 1055 state = 675 state = 676 state = 677 state = 978 state = 979 state = 454 state = 980 state = 1097 state = 773 state = 1119 state = 658 state = 1186 state = 941 state = 942 state = 943 state = 936 state = 935 state = 805 state = 294 state = 1170 state = 944 state = 803 state = 659 state = 1052 state = 1118 state = 767 state = 552 state = 452 state = 456 state = 457 state = 452 state = 453 state = 446 state = 447 state = 1064 state = 662 state = 663 state = 661 state = 450 state = 451 state = 448 state = 449 state = 273 state = 1057 state = 1059 state = 458 state = 655 state = 1067 state = 460 state = 459 state = 513 state = 461 state = 290 state = 514 state = 462 state = 806 state = 1015 state = 178 state = 699
					}
				}
				add_state_modifier = {
					modifier = {
						arabia_cores_modifiers = 1
					}
				}
			}
			
			
			if = {
				limit = { has_game_rule = { rule = debug_decisions_activate option = ACTIVATE } }
				random_country = { d_debug_decisions = yes }
			}
			### AI_DIVISION_LIMITER_DYNAMIC
			if = {
				limit = {
					has_game_rule = { rule = ai_division_limiter_status option = AI_DIVISION_LIMITER_DYNAMIC }
				}
				every_possible_country = {
					set_variable = { ai_upper_limit = num_of_factories }
					multiply_variable = { ai_upper_limit = 1.15 }
					if = {
						limit = { is_major = yes }
						multiply_variable = { ai_upper_limit = 1.15 }
					}
					if = {
						limit = { has_war = yes }
						multiply_variable = { ai_upper_limit = 1.2 }
					}
					if = {
						limit = { threat > 0.74 }
						multiply_variable = { ai_upper_limit = 1.05 }
					}
					if = {
						limit = {
							OR = {
								has_idea = irregular_army
								has_idea = partial_regular_army
							}
						}
						add_to_variable = { ai_upper_limit = 10 }
						add_to_variable = { ai_upper_limit = peoples_militia_var }
					}
					round_variable = ai_upper_limit
				}
			}

			### AI_DIVISION_LIMITER_DYNAMIC
			random_country = {
				set_variable = { global.total_division = 0 }
				set_variable = { global.total_ships = 0 }
				set_variable = { global.total_avia = 0 }
				set_variable = { global.total_no_ai_player = 0 }
				every_country = {
					add_to_variable = { global.total_division = THIS.num_divisions }
					add_to_variable = { global.total_ships = THIS.num_ships }
					add_to_variable = { global.total_avia = THIS.num_deployed_planes }
				}
				every_country = {
					limit = { is_ai = no }
					add_to_variable = { global.total_no_ai_player = 1 }
				}
			}
			if = {
				limit = { has_game_rule = { rule = ai_division_total_limiter_status option = AI_DIVISION_TOTAL_LIMITER_1000 } }
				random_country = { set_variable = { global.total_division_limit = 1000 } }
			}
			if = {
				limit = { has_game_rule = { rule = ai_division_total_limiter_status option = AI_DIVISION_TOTAL_LIMITER_1250 } }
				random_country = { set_variable = { global.total_division_limit = 1250 } }
			}
			if = {
				limit = { has_game_rule = { rule = ai_division_total_limiter_status option = AI_DIVISION_TOTAL_LIMITER_1500 } }
				random_country = { set_variable = { global.total_division_limit = 1500 } }
			}
			if = {
				limit = { has_game_rule = { rule = ai_division_total_limiter_status option = AI_DIVISION_TOTAL_LIMITER_1750 } }
				random_country = { set_variable = { global.total_division_limit = 1750 } }
			}
			if = {
				limit = { has_game_rule = { rule = ai_division_total_limiter_status option = AI_DIVISION_TOTAL_LIMITER_2000 } }
				random_country = { set_variable = { global.total_division_limit = 2000 } }
			}
			if = {
				limit = { has_game_rule = { rule = ai_division_total_limiter_status option = AI_DIVISION_TOTAL_LIMITER_2250 } }
				random_country = { set_variable = { global.total_division_limit = 2250 } }
			}
			if = {
				limit = { has_game_rule = { rule = ai_division_total_limiter_status option = AI_DIVISION_TOTAL_LIMITER_2500 } }
				random_country = { set_variable = { global.total_division_limit = 2500 } }
			}
			if = {
				limit = { has_game_rule = { rule = ai_division_total_limiter_status option = AI_DIVISION_TOTAL_LIMITER_2750 } }
				random_country = { set_variable = { global.total_division_limit = 2750 } }
			}
			if = {
				limit = { has_game_rule = { rule = ai_division_total_limiter_status option = AI_DIVISION_TOTAL_LIMITER_3000 } }
				random_country = { set_variable = { global.total_division_limit = 3000 } }
			}
			if = {
				limit = { has_game_rule = { rule = ai_division_total_limiter_status option = AI_DIVISION_TOTAL_LIMITER_3250 } }
				random_country = { set_variable = { global.total_division_limit = 3250 } }
			}
			if = {
				limit = { has_game_rule = { rule = ai_division_total_limiter_status option = AI_DIVISION_TOTAL_LIMITER_3500 } }
				random_country = { set_variable = { global.total_division_limit = 3500 } }
			}

			### volunteer_only
			every_possible_country = {
				limit = {
					has_idea = volunteer_only
					NOT = { has_dynamic_modifier = { modifier = volunteer_only_dyn } }
				}
				set_variable = { volunteer_only_var = party_popularity@ruling_party }
				multiply_variable = { volunteer_only_var = has_war_support }
				multiply_variable = { volunteer_only_var = 0.0045 }
				subtract_from_variable = { volunteer_only_var = 0.015 }
				add_dynamic_modifier = { modifier = volunteer_only_dyn }
			}
			
### АЛЬТОВЫЕ СЦЕНАРИИ
			if = {
				limit = {
					OR = {
						has_global_flag = THE_MOTHER_OF_ORDER_FLAG
						has_global_flag = WORLD_OF_SPLIT_FLAG
					}
				}
				#set_global_flag = AI_AGGRESSION_ULTRA_FLAG
				random_country = {
					limit = { is_ai = no }
					log = "[GetDateText]: [This.GetName] ([This.GetTag]): IS ADJUSTER"
					set_country_flag = NW_WOS_settings
					set_global_flag = NW_WOS_settings
				}
				set_variable = { global.total_trozkist = 0 }
				
				random_country = {
					limit = {
						has_government = trozkism
						not_is_really_trozkist = yes
					}
					set_var_for_troz_threat_dyn = yes
				}
				
				every_country = {
					if = {
						limit = { NOT = { has_focus_tree = generic_focus } }
						load_focus_tree = { tree = generic_focus keep_completed = no }
						every_unit_leader = { retire = yes }
					}
				
					if = {
						limit = { has_government = anarchism }
						country_event = { id = TRpolitical.106 }
					}
					if = {
						limit = { has_war_with = JAP }
						every_enemy_country = { PREV = { white_peace = PREV } }
					}
					if = {
						limit = { is_faction_leader = yes }
						dismantle_faction = yes
					}
					if = {
						limit = {
							has_government = trozkism
							not_is_really_trozkist = yes
						}
						add_to_variable = { global.total_trozkist = 1 }
						if = {
							limit = {
								NOT = { has_dynamic_modifier = { modifier = troz_threat_dyn } }
								not_is_really_trozkist = yes
							}
							add_dynamic_modifier = { modifier = troz_threat_dyn }
						}
						if = {
							limit = { NOT = { has_country_flag = is_trozkist_country_flag } }
							set_country_flag = is_trozkist_country_flag
						}
						if = {
							limit = { num_of_factories > 74 }
							add_to_variable = { global.troz_threat_var = 3 }
							log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): добавил 3 тронапряги как мажор"
						}
						else_if = {
							limit = { num_of_factories > 24 }
							add_to_variable = { global.troz_threat_var = 2 }
							log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): добавил 2 тронапряги как миддл"
						}
						else = {
							add_to_variable = { global.troz_threat_var = 1 }
							log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): добавил 1 тронапряги как минор)0"
						}
					}
	
					destroy_ships = { type = ship_hull_light		count = all }
					destroy_ships = { type = ship_hull_cruiser		count = all }
					destroy_ships = { type = ship_hull_heavy		count = all }
					destroy_ships = { type = ship_hull_carrier		count = all }
					destroy_ships = { type = ship_hull_submarine	count = all }
				}
				
### МИР РАСКОЛА
				if = {
					limit = { has_global_flag = WORLD_OF_SPLIT_FLAG }
					every_country = {
						limit = { is_subject = yes }
						drop_cosmetic_tag = yes
						OVERLORD = {
							set_autonomy = {
								target = PREV
								autonomy_state = autonomy_free
							}
						}
					}
					BUL = {
						start_civil_war = {
							ideology = fascism
							size = 0.5
						} 
					}
				}
			}
			
			#random_country = {
			#	set_country_flag = timer_timer_flag
			#	log = "[GetDateText]: [This.GetName] ([This.GetTag]): Избран крикуном"
			#}
			#Configurator
			#random_country = {
			#	limit = { is_ai = no }
			#	set_global_flag = nw_configurator_open
			#}
			
			set_variable = { counter_days = 0 }
			
			### Delete SAI // убран с карты по дефолту
			#CHL = { transfer_state = 933 }
			#933 = { remove_core_of = SAI }
			
			### Start legitimacy
			#every_country = {
			#	country_event = { id = tmo.migration.9 }
			#}
			#if = {
			#	limit = {
			#		is_historical_focus_on = no
			#		has_start_date < 1936.1.2
			#	}
			#	every_country = {
			#		limit = {
			#			OR = {
			#				has_focus_tree = generic_focus
			#				has_focus_tree = generic_anarchism_focus
			#			}
			#			democratic < 1
			#			communism < 1
			#			fascism < 1
			#			neutrality < 1
			#			technocracy < 1
			#			trozkism < 1
			#			monarchy < 1
			#			anarchism < 1
			#		}
			#		random_list = {
			#			50 = { }
			#			20 = { add_popularity = { ideology = technocracy popularity = 0.2 } }
			#			10 = { add_popularity = { ideology = technocracy popularity = 0.15 } }
			#			10 = { add_popularity = { ideology = technocracy popularity = 0.1 } }
			#			10 = { add_popularity = { ideology = technocracy popularity = 0.05 } }
			#		}
			#	}
			#}
			every_country = {
				limit = {
					OR = {
						tag = LIE
						tag = DNZ
						tag = ADR
						tag = MNC
						tag = TNR
						tag = SMA
						tag = VAT
					}
					is_ai = yes
				}
				set_rule = { can_join_factions = no }
				set_rule = { can_create_factions = no }
				add_ideas = justify_minor_idea
				log = "[GetDateText]: [This.GetName] ([This.GetTag]): запрет вступать в альянсы"
			}
			
#			if = {
#				limit = {
#					has_game_rule = {
#						rule = trade_weapons
#						option = DEFAULT
#					}
#				}
#				random_country = {
#					limit = { is_ai = no }
#					set_variable = {
#						var = global.total_infantry_weapons
#						value = 0
#					}
#					set_variable = {
#						var = global.total_artillery
#						value = 0
#					}
#					set_variable = {
#						var = global.total_support
#						value = 0
#					}
#					set_variable = {
#						var = global.total_motorized
#						value = 0
#					}
#					set_variable = {
#						var = global.total_mechanized
#						value = 0
#					}
#					set_variable = {
#						var = global.total_armored_car
#						value = 0
#					}
#					set_variable = {
#						var = global.total_light_tanks
#						value = 0
#					}
#					set_variable = {
#						var = global.total_medium_tanks
#						value = 0
#					}
#					set_variable = {
#						var = global.total_air_light_fighter
#						value = 0
#					}
#					set_variable = {
#						var = global.total_air_heavy_fighter
#						value = 0
#					}
#				}
#			}
			
### generic_tree_all_allowed
			if = {
				limit = {
					has_game_rule = {
						rule = generic_tree_all_allowed
						option = GENERIC_ALLOWED_ALL
					}
				}
				set_global_flag = generic_all_flag
			}
			
			### generic_tree_all_set_ideology
			if = {
				limit = {
					NOT = {
						has_game_rule = {
							rule = generic_tree_all_set_ideology
							option = DEFAULT
						}
					}
				}
				set_global_flag = generic_all_flag
				if = {
					limit = {
						has_game_rule = {
							rule = generic_tree_all_set_ideology
							option = GENERIC_ALL_SET_DEMOCRATIC
						}
					}
					set_global_flag = generic_all_set_democratic_flag
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = generic_tree_all_set_ideology
							option = GENERIC_ALL_SET_COMMUNISM
						}
					}
					set_global_flag = generic_all_set_communism_flag
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = generic_tree_all_set_ideology
							option = GENERIC_ALL_SET_FASCISM
						}
					}
					set_global_flag = generic_all_set_fascism_flag
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = generic_tree_all_set_ideology
							option = GENERIC_ALL_SET_NEUTRALITY
						}
					}
					set_global_flag = generic_all_set_neutrality_flag
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = generic_tree_all_set_ideology
							option = GENERIC_ALL_SET_TECHNOCRACY
						}
					}
					set_global_flag = generic_all_set_technocracy_flag
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = generic_tree_all_set_ideology
							option = GENERIC_ALL_SET_TROZKISM
						}
					}
					set_global_flag = generic_all_set_trozkism_flag
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = generic_tree_all_set_ideology
							option = GENERIC_ALL_SET_MONARCHY
						}
					}
					set_global_flag = generic_all_set_monarchy_flag
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = generic_tree_all_set_ideology
							option = GENERIC_ALL_SET_ANARCHISM
						}
					}
					set_global_flag = generic_all_set_anarchism_flag
				}
			}
			
### generic_spawn_anarchists перенесено в bookmarks
			if = {
				limit = {
					has_game_rule = {
						rule = generic_spawn_anarchists
						option = GENERIC_SPAWN_ANARCHISTS_ONE
					}
				}
				random_country = {
					limit = {
						exists = yes
						is_ai = yes
						NOT = {
							tag = TIG
							has_government = anarchism
							has_country_flag = generic_spawn_anarchists_flag
						}
						NOT = {
							is_subject = yes
							OVERLORD = { has_government = fascism }
						}
						has_focus_tree = generic_focus
						num_of_controlled_states > 1
					}
					log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): выбран анархистом"
					set_country_flag = generic_spawn_anarchists_flag
				}
			}
			else_if = {
				limit = {
					has_game_rule = {
						rule = generic_spawn_anarchists
						option = GENERIC_SPAWN_ANARCHISTS_TWO
					}
				}
				random_country = {
					limit = {
						exists = yes
						is_ai = yes
						NOT = {
							tag = TIG
							has_government = anarchism
							has_country_flag = generic_spawn_anarchists_flag
						}
						NOT = {
							is_subject = yes
							OVERLORD = { has_government = fascism }
						}
						has_focus_tree = generic_focus
						num_of_controlled_states > 1
					}
					log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): выбран анархистом"
					set_country_flag = generic_spawn_anarchists_flag
				}
				random_country = {
					limit = {
						exists = yes
						is_ai = yes
						NOT = {
							tag = TIG
							has_government = anarchism
							has_country_flag = generic_spawn_anarchists_flag
						}
						NOT = {
							is_subject = yes
							OVERLORD = { has_government = fascism }
						}
						has_focus_tree = generic_focus
						num_of_controlled_states > 1
					}
					log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): выбран анархистом"
					set_country_flag = generic_spawn_anarchists_flag
				}
			}
			else_if = {
				limit = {
					has_game_rule = {
						rule = generic_spawn_anarchists
						option = GENERIC_SPAWN_ANARCHISTS_THREE
					}
				}
				random_country = {
					limit = {
						exists = yes
						is_ai = yes
						NOT = {
							tag = TIG
							has_government = anarchism
							has_country_flag = generic_spawn_anarchists_flag
						}
						NOT = {
							is_subject = yes
							OVERLORD = { has_government = fascism }
						}
						has_focus_tree = generic_focus
						num_of_controlled_states > 1
					}
					log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): выбран анархистом"
					set_country_flag = generic_spawn_anarchists_flag
				}
				random_country = {
					limit = {
						exists = yes
						is_ai = yes
						NOT = {
							tag = TIG
							has_government = anarchism
							has_country_flag = generic_spawn_anarchists_flag
						}
						NOT = {
							is_subject = yes
							OVERLORD = { has_government = fascism }
						}
						has_focus_tree = generic_focus
						num_of_controlled_states > 1
					}
					log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): выбран анархистом"
					set_country_flag = generic_spawn_anarchists_flag
				}
				random_country = {
					limit = {
						exists = yes
						is_ai = yes
						NOT = {
							tag = TIG
							has_government = anarchism
							has_country_flag = generic_spawn_anarchists_flag
						}
						NOT = {
							is_subject = yes
							OVERLORD = { has_government = fascism }
						}
						has_focus_tree = generic_focus
						num_of_controlled_states > 1
					}
					log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): выбран анархистом"
					set_country_flag = generic_spawn_anarchists_flag
				}
			}
			
### WONDERS
			if = {
				limit = {
					OR = {
						has_game_rule = {
							rule = miracles_status
							option = MIRACLES
						}
						has_game_rule = {
							rule = miracles_status
							option = MIRACLES_AND_MOAI
						}
					}
				}
				random_country = {
					news_event = { id = trworldnews.35 hours = 3 }
					news_event = { id = trworldnews.36 hours = 4 }
				}
				2 = { set_state_flag = kolizeum_wonder_flag }
				616 = { set_state_flag = great_wall_wonder_flag }
				621 = { set_state_flag = great_wall_wonder_flag }
				611 = { set_state_flag = great_wall_wonder_flag }
				608 = { set_state_flag = great_wall_wonder_flag }
				609 = { set_state_flag = great_wall_wonder_flag }
				816 = { set_state_flag = great_wall_wonder_flag }
				494 = { set_state_flag = machu_pikchu_wonder_flag }
				455 = { set_state_flag = petra_wonder_flag }
				437 = { set_state_flag = taj_mahal_wonder_flag }
				500 = { set_state_flag = cristos_redentor_wonder_flag }
				474 = { set_state_flag = chichen_itza_wonder_flag }
				341 = { set_state_flag = sobor_sofia_wonder_flag }
				1024 = { set_state_flag = afin_acropol_wonder_flag }
				173 = { set_state_flag = algambra_wonder_flag }
				741 = { set_state_flag = angkor_wonder_flag }
				933 = { set_state_flag = moai_wonder_flag }
				219 = { set_state_flag = kremlin_wonder_flag }
				52 = { set_state_flag = noishvanshtain_wonder_flag }
				552 = { set_state_flag = piramids_wonder_flag }
				358 = { set_state_flag = statuya_liberty_wonder_flag }
				338 = { set_state_flag = stonehenge_wonder_flag }
				556 = { set_state_flag = tombuktu_wonder_flag }
				531 = { set_state_flag = temple_kiemidzu_dera_wonder_flag }
				16 = { set_state_flag = eiffel_tower_wonder_flag }
				
				2 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = kolizeum_wonder } }
				616 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } } }
				621 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } } }
				611 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } } }
				608 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } } }
				609 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } } }
				816 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } } }
				494 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = machu_pikchu_wonder } }
				455 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = petra_wonder } }
				437 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = taj_mahal_wonder } }
				500 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = cristos_redentor_wonder } }
				474 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = chichen_itza_wonder } }
				341 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = sobor_sofia_wonder } }
				1024 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = afin_acropol_wonder } }
				173 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = algambra_wonder } }
				741 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = angkor_wonder } }
				933 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } } } 	#no wonder
				219 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = kremlin_wonder } }
				52 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = noishvanshtain_wonder } }
				552 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = piramids_wonder } }
				358 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = statuya_liberty_wonder } }
				338 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = stonehenge_wonder } }
				556 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = tombuktu_wonder } }
				531 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = temple_kiemidzu_dera_wonder } }
				16 = { controller = { add_to_variable = { var = wonder_thief_score value = 1 } add_ideas = eiffel_tower_wonder } }
				every_country = {
					limit = { any_controlled_state = { has_state_flag = great_wall_wonder_flag } }
					country_event = { id = TR.wonder.29 }
				}
				### Start pointer great china wall
				every_possible_country = {
					set_variable = { var = bonus_gw value = 0 }
				}
				if = {
					limit = {
						has_game_rule = {
							rule = miracles_status
							option = MIRACLES_AND_MOAI
						}
					}
					set_global_flag = magic_moai
					933 = { controller = { country_event = { id = TR.wonder.13 } } }
					else = {
						933 = { controller = { add_ideas = moai_wonder } }
					}
				}
			}
			
			set_variable = { var = var_add_pop value = 0 }
			
			#POL = { country_event = { id = poland.story.1 } }
			
			if = {
				limit = {
					OR = {
						has_game_rule = {
							rule = ai_aggression_status
							option = AI_AGGRESSION_ULTRA
						}
						has_global_flag = AI_AGGRESSION_ULTRA_FLAG
					}
				}
				every_country = {
					add_ideas = ai_aggression_ultra_idea
					set_rule = {
						can_declare_war_on_same_ideology = yes
						can_only_justify_war_on_threat_country = no
					}
				}
			}
			
			if = {
				limit = {
					has_game_rule = {
						rule = ai_faction_status
						option = AI_FACTION_NO
					}
				}
				every_country = {
					limit = { is_ai = yes }
					set_rule = { can_join_factions = no }
				}
			}
			
			if = {
				limit = {
					has_game_rule = {
						rule = ai_force_build_land_cruiser_status
						option = AI_FORCE_BUILD_LAND_CRUISER_UP
					}
				}
				set_global_flag = ai_force_build_land_cruiser_flag
			}
			
			
### СТАРТПАК СЕКЦИЯ ###
		# 1936 - 1939 #
			# else_if = {
				# limit = {
					# has_start_date > 1936.1.2
					# has_start_date < 1939.8.15
				# }
				# ### Дания стартпак
				# DEN = {
					# country_event = { id = apdenmark.4000 days = 989 }	#1942.4.30
				# }
				# ### Германия стартпак
				# GER = {
					# country_event = { id = NWgermany.750 days = 33 }
					# country_event = { id = NWgermany.760 days = 286 }
				# }
				# ### ENG
				# ENG = {
					# #GER
					# country_event = { id = NWgermany.28 days = 85 } 	# В GER может начаться ГВ и ивент застрянет в воздухе. В пульсаре происходит проверка и переадресация правильному GER
					# #SAU
					# country_event = { id = NWsaudi.601 days = 156 }
					# country_event = { id = NWsaudi.601 days = 865 }
					# country_event = { id = NWsaudi.601 days = 1220 }
					# country_event = { id = NWsaudi.601 days = 1574 }
					# country_event = { id = NWsaudi.601 days = 1928 }
					# country_event = { id = NWsaudi.601 days = 2282 }
					# country_event = { id = NWsaudi.601 days = 2636 }
					# country_event = { id = NWsaudi.601 days = 2991 }
					# country_event = { id = NWsaudi.601 days = 3345 }
					# country_event = { id = NWsaudi.601 days = 3700 }
					# country_event = { id = NWsaudi.601 days = 4055 }
				# }
				# ### SAU
				# SAU = {
					# country_event = { id = NWsaudi.500 days = 17 }
				# }
				# ### OMA
				# OMA = {
					# country_event = { days = 462 id = NWmuscat.270 }	#18 ноября 1940 года
				# }
				# ### SOV
				# SOV = {
					# country_event = { id = NWgeneric_stories.1 days = 39 }		#Землетрясение в Дикили
				# }
			# }
		# 1939 - 1940 #
			# else_if = {
				# limit = {
					# has_start_date > 1939.01.01
					# has_start_date < 1940.01.01
				# }
				# POL = { country_event = { id = poland.flavor.2 days = 89 } }
			# }
### КОНЕЦ СЕКЦИИ ###
			
			#Починка подчинения
			every_state = {
				limit = {
					OR = {
						AND = {
							NOT = { is_core_of = ENG }
							is_owned_by = ENG
						}
						AND = {
							NOT = { is_core_of = FRA }
							is_owned_by = FRA
						}
						AND = {
							NOT = { is_core_of = BPL }
							is_owned_by = BPL
						}
					}
				}
				set_compliance = 100
				set_resistance = 0
			}
			TUR = {
				every_owned_state = {
					limit = {
						is_core_of = KRD
						NOT = { is_core_of = TUR }
					}
					set_compliance = 20
					set_resistance = 40
				}
			}
			962 = {
				if = {
					limit = {
						has_resistance = yes
					}
					set_compliance = 10
					set_resistance = 80
				}
			}
			
			#Починка субки (теперь уже поломка)
			every_possible_country = {
				limit = {
					has_government = neutrality
					OR = {
						has_country_flag = militarism
						# OR = {
							# original_tag = GXC
							# original_tag = YUN
							# original_tag = SHX
							# original_tag = XSM
							# original_tag = SIK
							# original_tag = SIH
							# original_tag = XIK
							# original_tag = SHA
							# original_tag = TNG
							# original_tag = NEA
							# original_tag = NGX
						# }
					}
				}
				set_country_leader_ideology = militarism_ideology
				clr_country_flag = militarism_ideology
			}
			set_variable = { global.num_of_extra_tank_school_var = 5 }
		}
	}
	
	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {
			#Припасы в Эфиопии	TODO куда это?
			if = {
				limit = {
					NOT = { has_global_flag = italo_ethiopian_war_over }
					FROM.FROM = {
						NOT = { is_in_array = { seizure_of_ammunition_states = This.id } }
					}
					ROOT = {
						tag = ITA
						has_war_with = ETH
					}
					FROM = {
						OR = {
							tag = ETH
							tag = AFA
							tag = TIG
						}
					}
				}
				FROM.FROM = { add_to_array = { global.seizure_of_ammunition_states = This.id } }
			}
			
			#Снос чужого призывного пункта в стейте // генерик решения
			if = {
				limit = {
					FROM.FROM = { has_state_flag = has_recruiting_station_flag_@FROM }
				}
				FROM.FROM = {
					if = {
						limit = { check_variable = { recruiting_station_var_level > 0 } }
						if = {
							limit = { check_variable = { recruiting_station_var_level = 6 } }
							add_state_modifier = { modifier = { local_manpower = -1.0 } }
						}
						else_if = {
							limit = { check_variable = { recruiting_station_var_level = 5 } }
							add_state_modifier = { modifier = { local_manpower = -0.9 } }
						}
						else_if = {
							limit = { check_variable = { recruiting_station_var_level = 4 } }
							add_state_modifier = { modifier = { local_manpower = -0.8 } }
						}
						else_if = {
							limit = { check_variable = { recruiting_station_var_level = 3 } }
							add_state_modifier = { modifier = { local_manpower = -0.7 } }
						}
						else_if = {
							limit = { check_variable = { recruiting_station_var_level = 2 } }
							add_state_modifier = { modifier = { local_manpower = -0.6 } }
						}
						else_if = {
							limit = { check_variable = { recruiting_station_var_level = 1 } }
							add_state_modifier = { modifier = { local_manpower = -0.5 } }
						}
						clear_variable = recruiting_station_var_level
					}
					clr_state_flag = has_recruiting_station_flag_@FROM
				}
			}
			
			#Снос корки анархиста в стейте // генерик решения
			if = {
				limit = {
					FROM.FROM = {
						has_state_flag = is_core_of_anarchist_flag
						is_core_of = FROM
					}
				}
				FROM.FROM = {
					clr_state_flag = is_core_of_anarchist_flag
					remove_core_of = FROM
				}
			}
			
			#Снос народных банков в стейте // генерик решения
			if = {
				limit = {
					FROM.FROM = {
						has_state_flag = has_peoples_bank_flag
					}
				}
				if = {
					limit = { ROOT = { NOT = { has_completed_focus = peoples_bank_focus } } }
					FROM.FROM = {
						clr_state_flag = has_peoples_bank_flag
					}
				}
				else = {
					ROOT = { set_actual_peoples_bank_idea = yes }
				}
				FROM = { set_actual_peoples_bank_idea = yes }
			}
		}
		
		effect = {
			### WONDER BLOCK ###
			
			# Колизей // Рим, Италия // 2
			if = {
				limit = { FROM.FROM = { has_state_flag = kolizeum_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.2 } }
			}
			# Мачу-Пикчу // Перу // 494
			if = {
				limit = { FROM.FROM = { has_state_flag = machu_pikchu_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.3 } }
			}
			# Петра // Иордания // 455
			if = {
				limit = { FROM.FROM = { has_state_flag = petra_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.4 } }
			}
			# Тадж-Махал // Агра, Индия // 437
			if = {
				limit = { FROM.FROM = { has_state_flag = taj_mahal_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.5 } }
			}
			# Статуя Христа-Искупителя // Рио-де-Жанейро, Бразилия // 500
			if = {
				limit = { FROM.FROM = { has_state_flag = cristos_redentor_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.6 } }
			}
			# Чичен-Ица // Юкатан, Мексика // 474
			if = {
				limit = { FROM.FROM = { has_state_flag = chichen_itza_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.7 } }
			}
			# Айя-София // Стамбул, Турция // 341
			if = {
				limit = { FROM.FROM = { has_state_flag = sobor_sofia_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.8 } }
			}
			# Афинский Акрополь // Афины, Греция // 1024
			if = {
				limit = { FROM.FROM = { has_state_flag = afin_acropol_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.9 } }
			}
			# Альгамбра // Гранада, Испания // 173
			if = {
				limit = { FROM.FROM = { has_state_flag = algambra_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.10 } }
			}
			# Ангкор // Ангкор, Камбоджа // 741
			if = {
				limit = { FROM.FROM = { has_state_flag = angkor_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.11 } }
			}
			# Моаи // Остров Пасхи, Чили // 933
			if = {
				limit = {
					NOT = { has_global_flag = magic_moai }
					FROM.FROM = { has_state_flag = moai_wonder_flag }
					ROOT = { NOT = { has_idea = moai_wonder } }
				}
				ROOT = { country_event = { id = TR.wonder.12 } }
			}
			# Детект владением моаи // Остров Пасхи, Чили // 933
			if = {
				limit = {
					has_global_flag = magic_moai
					FROM.FROM = { has_state_flag = moai_wonder_flag }
					ROOT = {
						NOT = { has_country_flag = moai_lord_wonder }
						NOT = {
							OR = {
								has_idea = moai_red_wonder
								has_idea = moai_blue_wonder
								has_idea = moai_green_wonder
								has_idea = moai_purp_wonder
							}
						}
					}
				}
				ROOT = { country_event = { id = TR.wonder.13 } }
			}
			# Московский Кремль // Москва, СССР // 219
			if = {
				limit = { FROM.FROM = { has_state_flag = kremlin_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.20 } }
			}
			# Нойшванштайн // Фюссен, Германия // 52
			if = {
				limit = { FROM.FROM = { has_state_flag = noishvanshtain_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.21 } }
			}
			# Пирамиды Гизы // Египет // 552
			if = {
				limit = { FROM.FROM = { has_state_flag = piramids_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.22 } }
			}
			# Статуя Свободы // Нью-Йорк, США // 358
			if = {
				limit = {
					FROM.FROM = { has_state_flag = statuya_liberty_wonder_flag }
					ROOT = {
						NOT = {
							has_idea = statuya_liberty_wonder
							has_idea = statuya_communism_wonder
							has_idea = statuya_monarchy_wonder
							has_idea = statuya_neutrality_wonder
							has_idea = statuya_trozkism_wonder
							has_idea = statuya_fascism_wonder
							has_idea = statuya_technocracy_wonder
							has_idea = statuya_anarchism_wonder
						}
					}
				}
				ROOT = { country_event = { id = TR.wonder.23 } }
			}
			# Стоунхендж // Уилтшир, Великобритания // 338
			if = {
				limit = { FROM.FROM = { has_state_flag = stonehenge_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.24 } }
			}
			# Томбукту // Мали // 556
			if = {
				limit = { FROM.FROM = { has_state_flag = tombuktu_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.25 } }
			}
			# Храм Киёмидзу-дэра // Киото, Япония // 531
			if = {
				limit = { FROM.FROM = { has_state_flag = temple_kiemidzu_dera_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.26 } }
			}
			# Эйфелева башня // Париж, Франция // 16
			if = {
				limit = { FROM.FROM = { has_state_flag = eiffel_tower_wonder_flag } }
				ROOT = { country_event = { id = TR.wonder.27 } }
			}
			#check controller of great china wall
			if = {
				limit = {
					FROM.FROM = {
						has_state_flag = great_wall_wonder_flag
						is_controlled_by = ROOT
					}
				}
				ROOT = {
					add_to_variable = { var = bonus_gw value = 1 }
					country_event = { id = TR.wonder.28 }
				}
				FROM = {
					subtract_from_variable = { var = bonus_gw value = 1 }
					country_event = { id = TR.wonder.28 }
				}
			}
		}
		
		effect = {
			# Fall of Tokyo
#			if = {
#				limit = {
#					original_tag = JAP
#					has_government = trozkism
#					has_completed_focus = JAP_all_or_nothing
#					282 = { is_controlled_by = ROOT }
#					FROM = {
#						original_tag = JAP
#						has_government = fascism
#					}
#				}
#				FROM = { save_event_target_as = jap_civ_loser }
#				MAN = { country_event = { id = wtt_japan.121 days = 1 } }
#			}
		}
	}
	
	on_government_change = {
		effect = {
			######### TROZKISM BLOCK #########
			if = {
				limit = { has_country_flag = is_trozkist_country_flag }
				clr_country_flag = is_trozkist_country_flag
				add_to_variable = { global.troz_threat_var = -1.5 }
				if = {
					limit = { has_cosmetic_tag = KMX_cosmetic }
					drop_cosmetic_tag = yes
				}
			}
			set_variable = { global.total_trozkist = 0 }
			every_country = {
				limit = {
					has_government = trozkism
					not_is_really_trozkist = yes
				}
				add_to_variable = { global.total_trozkist = 1 }
				if = {
					limit = { NOT = { has_dynamic_modifier = { modifier = troz_threat_dyn } } }
					add_dynamic_modifier = { modifier = troz_threat_dyn }
				}
			}
			if = {
				limit = {
					has_government = trozkism
					not_is_really_trozkist = yes
				}
				if = {
					limit = { NOT = { has_country_flag = is_trozkist_country_flag } }
					set_country_flag = is_trozkist_country_flag
				}
				if = {
					limit = { num_of_factories > 49 }
					add_to_variable = { global.troz_threat_var = 3 }
					log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): добавил 3 тронапряги как мажор"
				}
				else_if = {
					limit = { num_of_factories > 24 }
					add_to_variable = { global.troz_threat_var = 2 }
					log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): добавил 2 тронапряги как миддл"
				}
				else = {
					add_to_variable = { global.troz_threat_var = 1 }
					log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): добавил 1 тронапряги как минор)0"
				}
				set_var_for_troz_threat_dyn = yes
			}
			######### END TROZKISM BLOCK #########
			country_event = { id = TRpolitical.106 }
			
			###
			
			#Смена подидеологии в случае ошибочной генерации
			if = {
				limit = {
					has_government = neutrality
					NOT = {
						has_country_flag = authoritarian_democracy
						has_country_flag = militarism
					}
					NOT = {
						original_tag = GXC
						original_tag = YUN
						original_tag = SHX
						original_tag = XSM
						original_tag = SIK
						original_tag = SIH
						original_tag = XIK
						original_tag = SHA
						original_tag = TNG
						original_tag = NEA
					}
				}
				random_list = {
					25 = { set_country_leader_ideology = despotism }
					25 = { set_country_leader_ideology = oligarchism }
					#25 = { set_country_leader_ideology = moderatism }
					#25 = { set_country_leader_ideology = centrism }
				}
			}
			if = {
				limit = {
					has_government = neutrality
					has_country_flag = authoritarian_democracy
				}
				set_country_leader_ideology = authoritarian_democracy
				clr_country_flag = authoritarian_democracy
			}
			if = {
				limit = {
					has_government = neutrality
					OR = {
						has_country_flag = militarism
						OR = {
							original_tag = GXC
							original_tag = YUN
							original_tag = SHX
							original_tag = XSM
							original_tag = SIK
							original_tag = SIH
							original_tag = XIK
							original_tag = SHA
							original_tag = TNG
							original_tag = NEA
						}
					}
				}
				set_country_leader_ideology = militarism_ideology
				clr_country_flag = militarism_ideology
			}
			if = {
				limit = {
					has_government = monarchy
					has_country_flag = dual_monarchy
				}
				set_country_leader_ideology = dual_monarchy
				clr_country_flag = dual_monarchy
			}
			if = {
				limit = {
					has_government = monarchy
					has_country_flag = absolute_monarchy
				}
				set_country_leader_ideology = absolute_monarchy
				clr_country_flag = absolute_monarchy
			}
			if = {
				limit = {
					has_government = communism
					has_country_flag = socialist_stratocracy
				}
				set_country_leader_ideology = socialist_stratocracy
				clr_country_flag = socialist_stratocracy
			}
			if = {
				limit = {
					has_government = trozkism
					has_country_flag = left_communism
				}
				set_country_leader_ideology = left_communism
				clr_country_flag = left_communism
			}
			if = {
				limit = {
					has_government = trozkism
					has_country_flag = trozkism1
				}
				set_country_leader_ideology = trozkism1
				clr_country_flag = trozkism1
			}
			if = {
				limit = {
					has_government = fascism
					has_country_flag = fascism_corporatism
				}
				set_country_leader_ideology = fascism_corporatism
				clr_country_flag = fascism_corporatism
			}
			if = {
				limit = {
					has_government = fascism
					has_country_flag = nationalism_ideology
				}
				set_country_leader_ideology = nationalism_ideology
				clr_country_flag = nationalism_ideology
			}
			if = {
				limit = {
					has_government = fascism
					has_country_flag = nazism
				}
				set_country_leader_ideology = nazism
				clr_country_flag = nazism
			}
			if = {
				limit = {
					has_government = fascism
					has_country_flag = clerical_fascism
				}
				set_country_leader_ideology = clerical_fascism
				clr_country_flag = clerical_fascism
			}
			if = {
				limit = {
					has_government = fascism
					has_country_flag = integralism
				}
				set_country_leader_ideology = integralism_ideology
				clr_country_flag = integralism
			}
			
			###
			
			if = {
				limit = {
					has_idea = irregular_army
				}
				country_lock_all_division_template = yes
			}
			if = {
				limit = {
					NOT = { has_government = anarchism }
					has_country_flag = set_anarchism_party_name_flag
				}
				reset_anarchism_party_name = yes
			}
		}
	}
	
	on_ruling_party_change = {
		effect = {
			every_other_country = {
				clr_country_flag = peace_talks_@ROOT_flag
			}
			if = {
				limit = {
					any_enemy_country = {
						NOT = { original_tag = ROOT }
					}
				}
				every_enemy_country = {
					limit = { NOT = { original_tag = ROOT } }
					set_country_flag = peace_talks_@ROOT_flag		# scripted_diplomatic_actions "peace_talks"
				}
			}
		}
	}
	
	on_peace = {
		effect = {
			every_other_country = {
				limit = {
					NOT = { has_war_with = ROOT }
					has_country_flag = peace_talks_@ROOT_flag
				}
				clr_country_flag = peace_talks_@ROOT_flag
			}
			every_other_country = {
				limit = {
					NOT = { has_war_with = ROOT }
					ROOT = { has_country_flag = peace_talks_@PREV_flag }
				}
				ROOT = { clr_country_flag = peace_talks_@PREV_flag }
			}
		}
	}
	
	#ROOT is subject FROM is previous overlord
	on_subject_free = {
		effect = {
			if = {
				limit = {
					tag = BPL
					has_cosmetic_tag = BPL_ENG
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					has_cosmetic_tag = BPL_technat_subject
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = PAL
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = JOR
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = LEB
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = SYR
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = SRL
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					has_cosmetic_tag = FIC_FRA
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = NFL
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = POL
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = COG
				}
				drop_cosmetic_tag = yes
			}
		}
	}
	
	#used when puppeting in a peace conference
	#ROOT = nation being puppeted, FROM = overlord
	on_puppet = {
		effect = {
			######### TROZKISM BLOCK #########
			if = {
				limit = { has_country_flag = is_trozkist_country_flag }
				clr_country_flag = is_trozkist_country_flag
				add_to_variable = { global.troz_threat_var = -1.5 }
			}
			set_variable = { global.total_trozkist = 0 }
			every_country = {
				limit = {
					has_government = trozkism
					not_is_really_trozkist = yes
				}
				add_to_variable = { global.total_trozkist = 1 }
				if = {
					limit = { NOT = { has_dynamic_modifier = { modifier = troz_threat_dyn } } }
					add_dynamic_modifier = { modifier = troz_threat_dyn }
				}
			}
			if = {
				limit = {
					ROOT = {
						has_government = trozkism
						not_is_really_trozkist = yes
					}
				}
				if = {
					limit = { NOT = { has_country_flag = is_trozkist_country_flag } }
					set_country_flag = is_trozkist_country_flag
				}
				if = {
					limit = { num_of_factories > 49 }
					add_to_variable = { global.troz_threat_var = 3 }
					log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): добавил 3 тронапряги как марионетка"
				}
				else_if = {
					limit = { num_of_factories > 24 }
					add_to_variable = { global.troz_threat_var = 2 }
					log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): добавил 2 тронапряги как марионетка"
				}
				else = {
					add_to_variable = { global.troz_threat_var = 1 }
					log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): добавил 1 тронапряги как марионетка"
				}
				set_var_for_troz_threat_dyn = yes
			}
			######### END TROZKISM BLOCK #########
			ROOT = { country_event = { id = TRpolitical.106 } }
			#Смена подидеологии в случае ошибочной генерации
			if = {
				limit = {
					has_government = neutrality
					NOT = { has_country_flag = authoritarian_democracy }
					NOT = { has_country_flag = militarism }
					NOT = {
						original_tag = GXC
						original_tag = YUN
						original_tag = SHX
						original_tag = XSM
						original_tag = SIK
						original_tag = SIH
						original_tag = XIK
						original_tag = SHA
						original_tag = TNG
						original_tag = NEA
					}
				}
				random_list = {
					25 = { set_country_leader_ideology = despotism }
					25 = { set_country_leader_ideology = oligarchism }
					#25 = { set_country_leader_ideology = moderatism }
					#25 = { set_country_leader_ideology = centrism }
				}
			}
			if = {
				limit = {
					has_government = neutrality
					has_country_flag = authoritarian_democracy
				}
				set_country_leader_ideology = authoritarian_democracy
			}
			if = {
				limit = { # TODO выпилить
					has_government = neutrality
					OR = {
						has_country_flag = militarism
						OR = {
							original_tag = GXC
							original_tag = YUN
							original_tag = SHX
							original_tag = XSM
							original_tag = SIK
							original_tag = SIH
							original_tag = XIK
							original_tag = SHA
							original_tag = TNG
							original_tag = NEA
						}
					}
				}
				set_country_leader_ideology = militarism_ideology
			}
			
			###
			
			if = {
				limit = {
					tag = SYR
					has_cosmetic_tag = SYR_FRA
					FROM = {
						NOT = {
							original_tag = FRA
							original_tag = FRC
							original_tag = FRR
							original_tag = FRF
						}
					}
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = LEB
					has_cosmetic_tag = LEB_FR
					FROM = {
						NOT = {
							original_tag = FRA
							original_tag = FRC
							original_tag = FRR
							original_tag = FRF
						}
					}
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = SRL
					has_cosmetic_tag = SRL_ENG
					FROM = { original_tag = ENG }
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = CYP
					has_cosmetic_tag = CYP_UK
					FROM = { original_tag = ENG }
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = NFL
					has_cosmetic_tag = NFL_ENG
					FROM = { original_tag = ENG }
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					has_cosmetic_tag = BPL_technat_subject
					FROM = { NOT = { tag = BPL } }
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					has_cosmetic_tag = FIC_FRA
					FROM = { NOT = { tag = event_target:NW_france_scope } }
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					AND = {
						tag = FIC
						is_subject_of = event_target:NW_france_scope
					}
				}
				set_cosmetic_tag = FIC_FRA
			}
			
		}
	}
	
	#used when puppeting through the occupied territories menu during peace time (or when releasing from non-core but owned territory, f.e. Britain releasing Egypt)
	#ROOT = nation being released, FROM = overlord
	on_release_as_puppet = {
		effect = {
			if = {
				limit = {
					OR = {
						has_global_flag = THE_MOTHER_OF_ORDER_FLAG
						has_global_flag = WORLD_OF_SPLIT_FLAG
					}
					NOT = { has_focus_tree = generic_focus }
				}
				load_focus_tree = { tree = generic_focus keep_completed = no }
			}
		}
		
		effect = {
			ROOT = { country_event = { id = TRpolitical.106 } }
			#Смена подидеологии в случае ошибочной генерации
			if = {
				limit = {
					has_government = neutrality
					NOT = { has_country_flag = authoritarian_democracy }
					NOT = { has_country_flag = militarism }
					NOT = {
						original_tag = GXC
						original_tag = YUN
						original_tag = SHX
						original_tag = XSM
						original_tag = SIK
						original_tag = SIH
						original_tag = XIK
						original_tag = SHA
						original_tag = TNG
						original_tag = NEA
						original_tag = NGX
						original_tag = YUL
						original_tag = HCP
					}
				}
				random_list = {
					25 = { set_country_leader_ideology = despotism }
					25 = { set_country_leader_ideology = oligarchism }
					#25 = { set_country_leader_ideology = moderatism }
					#25 = { set_country_leader_ideology = centrism }
				}
			}
			if = {
				limit = {
					has_government = neutrality
					has_country_flag = authoritarian_democracy
				}
				set_country_leader_ideology = authoritarian_democracy
			}
			if = {
				limit = {
					has_government = neutrality
					OR = {
						has_country_flag = militarism
						OR = {
							original_tag = GXC
							original_tag = YUN
							original_tag = SHX
							original_tag = XSM
							original_tag = SIK
							original_tag = SIH
							original_tag = XIK
							original_tag = SHA
							original_tag = TNG
							original_tag = NEA
							original_tag = NGX
							original_tag = YUL
							original_tag = HCP
						}
					}
				}
				set_country_leader_ideology = militarism_ideology
			}
			
			###
			
			if = {
				limit = {
					tag = COG
					NOT = {
						FROM = {
							original_tag = BEL
						}
					}
				}
				COG = {
					drop_cosmetic_tag = yes
				}
			}
			if = {
				limit = {
					has_cosmetic_tag = FIC_FRA
					FROM = { NOT = { tag = event_target:NW_france_scope } }
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					AND = {
						tag = FIC
						is_subject_of = event_target:NW_france_scope
					}
				}
				set_cosmetic_tag = FIC_FRA
			}
			if = {
				limit = {
					has_cosmetic_tag = CYP_UK
					FROM = { NOT = { tag = ENG } }
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					AND = {
						tag = CYP
						is_subject_of = ENG
					}
				}
				set_cosmetic_tag = CYP_UK
			}
		}
	}
	
	#FROM is war target
	on_declare_war = {
		effect = {
			#Польша на два фронта
#			if = {
#				limit = {
#					has_global_flag = sov_yes_pact
#					NOT = { GER = { is_in_faction_with = SOV } }
#					POL = {
#						is_in_faction = yes
#						is_faction_leader = no
#					}
#					OR = {
#						POL = { has_war_with = GER }
#						POL = { has_war_with = SOV }
#					}
#					OR = {
#						AND = {
#							FROM = { OR = { tag = SOV tag = GER } }
#							ROOT = { tag = POL }
#						}
#						AND = {
#							FROM = { tag = POL }
#							ROOT = { OR = { tag = SOV tag = GER } }
#						}
#					}
#				}
#				FROM = { set_country_flag = POL_truce }
#				ROOT = { set_country_flag = POL_truce }
#				
#				random_country = {
#					limit = {
#						is_in_faction_with = POL
#						is_faction_leader = yes
#					}
#					if = {
#						limit = { NOT = { has_war_with = FROM has_war_with = ROOT } }
#						country_event = { id = poland.war.42 }
#					}
#					else = {
#						FROM = { clr_country_flag = POL_truce }
#						ROOT = { clr_country_flag = POL_truce }
#					}
#				}
#			}
			
			FROM = {
				set_country_flag = is_war_target_of_@ROOT
				log = "[GetDateText]: [This.GetName] ([This.GetTag]): is war target of [Root.GetName] ([Root.GetTag])"
			}
			#Страна в гражданской войне
			if = {
				limit = {
					if = {
						limit = { SPR_scw_in_progress = yes }
						FROM = { is_literally_spain = no }
						ROOT = { is_literally_spain = no }
					}
					FROM = {
						has_civil_war = yes
						NOT = { has_idea = generic_civil_war }
					}
					ROOT = {
						has_civil_war = yes
						NOT = { has_idea = generic_civil_war }
					}
				}
				FROM = { add_ideas = generic_civil_war }
				ROOT = { add_ideas = generic_civil_war }
			}
			#Клон танковых школ для FROM
			if = {
				limit = {
					FROM = { original_tag = ROOT NOT = { has_any_tank_school = yes } }
					ROOT = { has_any_tank_school = yes }
				}
				FROM = { copy_tank_school_by_root = yes }
			}
			#Клон танковых школ для ROOT
			if = {
				limit = {
					ROOT = { original_tag = FROM NOT = { has_any_tank_school = yes } }
					FROM = { has_any_tank_school = yes }
				}
				ROOT = { copy_tank_school_by_from = yes }
			}
			
			### TRO THREAT ###
			if = {
				limit = {
					OR = {
						AND = {
							ROOT = { has_government = trozkism }
							FROM = { NOT = { has_government = trozkism } }
						}
						AND = {
							FROM = { has_government = trozkism }
							ROOT = { NOT = { has_government = trozkism } }
						}
					}
				}
				add_to_variable = { global.troz_threat_var = 1 tooltip = troz_threat_tt }
				set_var_for_troz_threat_dyn = yes
				log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): добавил 1 тронапряги из-за нападения на [From.GetName] ([From.GetTag])"
			}
			if = {
				limit = {
					ROOT = { has_government = trozkism }
					FROM = { has_government = trozkism }
				}
				add_to_variable = { global.troz_threat_var = -5 tooltip = troz_threat_tt }
				set_var_for_troz_threat_dyn = yes
				log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): добавил -5 тронапряги из-за нападения на [From.GetName] ([From.GetTag])"
			}
			
			### ИРРЕГУЛЯРКА ###
			if = {
				limit = {
					FROM = {
						OR = {
							has_idea = irregular_army
							has_idea = partial_regular_army
						}
					}
				}
				set_temp_variable = { peoples_militia_var_temp = FROM.peoples_militia_var }
				if = {
					limit = { check_variable = { peoples_militia_var_temp < 10 } }
					add_to_temp_variable = { peoples_militia_var_temp = 1 }
				}
				else_if = {
					limit = {
						check_variable = { peoples_militia_var_temp > 9 }
						check_variable = { peoples_militia_var_temp < 20 }
					}
					add_to_temp_variable = { peoples_militia_var_temp = 2 }
				}
				else = {
					multiply_temp_variable = { peoples_militia_var_temp = 1.1 }
				}
				round_temp_variable = peoples_militia_var_temp
				set_temp_variable = { peoples_militia_var_temp1 = peoples_militia_var_temp }
				set_temp_variable = { peoples_militia_var_temp2 = peoples_militia_var_temp }
				multiply_temp_variable = { peoples_militia_var_temp = 0.5 }
				round_temp_variable = peoples_militia_var_temp
				subtract_from_temp_variable = { peoples_militia_var_temp1 = peoples_militia_var_temp }
				add_to_temp_variable = { peoples_militia_var_temp2 = peoples_militia_var_temp }
				round_temp_variable = peoples_militia_var_temp1
				round_temp_variable = peoples_militia_var_temp2
				if = {
					limit = { check_variable = { peoples_militia_var_temp1 = peoples_militia_var_temp2 } }
					add_to_temp_variable = { peoples_militia_var_temp2 = 1 }
				}
				custom_effect_tooltip = irregular_army_tt2
			}
		}
	}
	
	# THIS is country that has just gotten into a war.
	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
		effect = {
			### TRO THREAT ###
			if = {
				limit = {
					ROOT = {
						has_government = trozkism
						not_is_really_trozkist = yes
					}
				}
				add_to_variable = { global.troz_threat_var = -1 }
				set_var_for_troz_threat_dyn = yes
				log = "[GetDateText]: [Root.GetName] ([Root.GetTag]): добавил -1 тронапряги капитуляцией"
			}
		}
		
		effect = {
# Меха на воровство three hundred bucks из ВПО
			if = {
				limit = {
					has_dlc = "Arms Against Tyranny"
					ROOT = { NOT = { has_country_flag = { flag = is_already_stolen_flag value > 0 } } }
				}
				ROOT = {
					set_country_flag = { flag = is_already_stolen_flag days = 365 value = 1 }
				}
				stolen_funds_mio_effect = yes
			}
		}
		
		effect = {
			if = {
				limit = {
					ROOT = {
						NOT = {
							has_country_flag = from_civil_war
							original_tag = FROM
						}
						is_major = no
						is_in_faction = yes
						num_faction_members > 1
						any_allied_country = {
							has_capitulated = no
						}
						AND = {
							is_dynamic_country = no
							any_enemy_country = {
								original_tag = ROOT
							}
						}
					}
				}
				ROOT = { country_event = { id = NW_capitulation.1 hours = 8 } }
			}
			
			if = {
				limit = {
					has_country_flag = from_civil_war
				}
				clr_country_flag = from_civil_war
			}
		}
	}
	
	on_uncapitulation = {
		effect = {
			# Уборка фабрик и доков вне карты после возвращения домой
			if = {
				limit = {
					original_tag = ROOT
					check_variable = { var = industrialists_counter@ROOT value > 0 }
				}
				set_variable = { var_null@ROOT = 0 }
				subtract_from_variable = { var_null@ROOT = industrialists_counter@ROOT }
				add_offsite_building = { type = arms_factory level = var_null@ROOT }
				add_offsite_building = { type = industrial_complex level = var_null@ROOT }
				set_variable = { industrialists_counter@ROOT = 0 }
			}
			if = {
				limit = {
					original_tag = ROOT
					check_variable = { var = obtain_dockyard_counter@ROOT value > 0 }
				}
				set_variable = { var_null@ROOT = 0 }
				multiply_variable = { industrialists_counter@ROOT = 2 }				
				subtract_from_variable = { var_null@ROOT = obtain_dockyard_counter@ROOT }
				add_offsite_building = { type = dockyard level = var_null@ROOT }
				set_variable = { obtain_dockyard_counter@ROOT = 0 }
			}
		}
	}
		
	#ROOT is winner #FROM gets annexed - For civil wars on_civil_war_end is also fired
	on_release_as_free = {
		effect = {
			if = {
				limit = {
					OR = {
						has_global_flag = THE_MOTHER_OF_ORDER_FLAG
						has_global_flag = WORLD_OF_SPLIT_FLAG
					}
					NOT = { has_focus_tree = generic_focus }
				}
				load_focus_tree = { tree = generic_focus keep_completed = no }
			}
		}
		
		effect = {
			ROOT = { country_event = { id = TRpolitical.106 } }
			if = {
				limit = {
					tag = POL
					POL = { has_cosmetic_tag = POL_SOV }
				}
				POL = { drop_cosmetic_tag = yes }
			}
			if = {
				limit = {
					tag = COG
					FROM = {
						NOT = {
							original_tag = BEL
						}
					}
				}
				COG = {
					drop_cosmetic_tag = yes
				}
			}
			if = {
				limit = {
					tag = MAN
					FROM = {
						NOT = {
							original_tag = JAP
						}
					}
				}
				MAN = {
					drop_cosmetic_tag = yes
				}
			}
			if = {
				limit = {
					tag = SYR
					has_cosmetic_tag = SYR_FRA
					FROM = {
						NOT = {
							original_tag = FRA
							original_tag = FRC
							original_tag = FRR
							original_tag = FRF
						}
					}
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = LEB
					has_cosmetic_tag = LEB_FR
					FROM = {
						NOT = {
							original_tag = FRA
							original_tag = FRC
							original_tag = FRR
							original_tag = FRF
						}
					}
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = SRL
					has_cosmetic_tag = SRL_ENG
					FROM = { NOT = { original_tag = ENG } }
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = BPL
					has_cosmetic_tag = BPL_ENG
					FROM = { NOT = { original_tag = ENG } }
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = NFL
					has_cosmetic_tag = NFL_ENG
					FROM = { NOT = { original_tag = ENG } }
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					has_cosmetic_tag = BPL_technat_subject
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					has_cosmetic_tag = FIC_FRA
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					has_cosmetic_tag = CYP_UK
				}
				drop_cosmetic_tag = yes
			}
		}
	}
	
	#ROOT is winner #FROM is loser
	on_peaceconference_ended = {
		effect = {
			FROM = { country_event = { id = TRpolitical.106 } }
			
			if = {
				limit = {
					FROM = {
						tag = SYR
						has_cosmetic_tag = SYR_FRA
					}
					ROOT = {
						NOT = {
							original_tag = FRA
							original_tag = FRC
							original_tag = FRR
							original_tag = FRF
						}
					}
				}
				FROM = {
					drop_cosmetic_tag = yes
				}
			}
			if = {
				limit = {
					FROM = {
						tag = LEB
						has_cosmetic_tag = LEB_FR
					}
					ROOT = {
						NOT = {
							original_tag = FRA
							original_tag = FRC
							original_tag = FRR
							original_tag = FRF
						}
					}
				}
				FROM = {
					drop_cosmetic_tag = yes
				}
			}
			if = {
				limit = {
					FROM = {
						tag = SRL
						has_cosmetic_tag = SRL_ENG
					}
					ROOT = { NOT = { original_tag = ENG } }
				}
				FROM = {
					drop_cosmetic_tag = yes
				}
			}
			if = {
				limit = {
					FROM = {
						tag = NFL
						has_cosmetic_tag = NFL_ENG
					}
					ROOT = { NOT = { original_tag = ENG } }
				}
				FROM = {
					drop_cosmetic_tag = yes
				}
			}
			if = {
				limit = {
					FROM = { has_cosmetic_tag = BPL_technat_subject }
					ROOT = { NOT = { tag = BPL } }
				}
				FROM = {
					drop_cosmetic_tag = yes
				}
			}
			
			#ЖОР 72 стейта GER = POL/CZE
			if = {
				limit = {
					FROM = {
						OR = {
							original_tag = POL
							original_tag = CZE
						}
					}
					72 = {
						owner = {
							OR = {
								original_tag = POL
								original_tag = CZE
							}
						}
					}
				}
				937 = { owner = { transfer_state = 72 } }
			}	
		}
		
		
		### Передача Сайуна
#		effect = {
#			if = {
#				limit = {
#					FROM = { original_tag = KTH }
#					original_tag = QUA
#					ENG = { has_country_flag = NWhadhramaut_1_a_flag }
#					OR = {
#						KTH = { is_subject_of = QUA }
#						NOT = { country_exists = KTH }
#					}
#				}
#				ENG = { country_event = { id = NWhadhramaut.2 hours = 8 } }
#			}
#		}

	}
	
	#FROM is invited guest, ROOT is faction leader.
	on_offer_join_faction = {
		effect = {
			if = {
				limit = {
					is_in_faction_with = VAT
					VAT = {
						has_idea = VAT_symbolum_nicaeum
					}
					FROM = {
						NOT = { has_idea = VAT_in_necessariis_unitas_1 }
						OR = {
							original_tag = ITA
							original_tag = FRA
							original_tag = POR
							original_tag = BEL
							original_tag = GER
							original_tag = LUX
							original_tag = HOL
							original_tag = IRE
							original_tag = AUS
							original_tag = HUN
							original_tag = CRO
							original_tag = SLV
							original_tag = POL
							original_tag = EST
							original_tag = LIT
							original_tag = LAT
							original_tag = CZE
							original_tag = SLO
							is_literally_spain = yes
						}
						is_left_ideology = no
					}
				}
				FROM = {
					add_ideas = VAT_in_necessariis_unitas_1
				}
			}
			if = {
				limit = {
					is_in_faction_with = VAT
					VAT = {
						has_idea = VAT_symbolum_nicaeum
					}
					FROM = {
						NOT = { has_idea = VAT_in_necessariis_unitas_2 }
						capital_scope = { is_on_continent = europe }
						NOT = {
							original_tag = ITA
							original_tag = FRA
							original_tag = POR
							original_tag = BEL
							original_tag = GER
							original_tag = LUX
							original_tag = HOL
							original_tag = IRE
							original_tag = AUS
							original_tag = HUN
							original_tag = CRO
							original_tag = SLV
							original_tag = POL
							original_tag = EST
							original_tag = LIT
							original_tag = LAT
							original_tag = CZE
							original_tag = SLO
							is_literally_spain = yes
						}
						is_left_ideology = no
					}
				}
				FROM = {
					add_ideas = VAT_in_necessariis_unitas_2
				}
			}
			
			###
			
			if = {
				limit = {
					FROM = {
						NOT = { has_government = anarchism }
						any_allied_country = {
							has_government = anarchism
						}
					}
				}
				every_other_country = {
					limit = {
						has_government = anarchism
						is_in_faction_with = FROM
					}
					FROM = { remove_isolate_ai_strategy = yes }
				}
			}
			if = {
				limit = {
					FROM = { has_government = anarchism }
				}
				every_other_country = {
					limit = {
						NOT = { has_government = anarchism }
						is_in_faction_with = FROM
					}
					FROM = { PREV = { remove_isolate_ai_strategy = yes } }
				}
			}
		}
	}
	
	#FROM is ex faction leader, ROOT is leaver
	on_leave_faction = {
		effect = {
			if = {
				limit = { NOT = { has_government = anarchism } }
				every_other_country = {
					limit = {
						has_government = anarchism
						is_in_faction_with = FROM
					}
					ROOT = { add_isolate_ai_strategy = yes }
				}
			
				else = {
					every_other_country = {
						limit = {
							NOT = { has_government = anarchism }
							is_in_faction_with = FROM
						}
						add_isolate_ai_strategy = yes
					}
				}
			}
		}
	}
	
	#FROM is faction leader on join faction requests. THIS DOES NOT FIRE ON ADD_TO_FACTION EFFECT! USE ON_OFFER_JOIN_FACTION!
	on_join_faction = {
		effect = {
			if = {
				limit = {
					FROM = {
						OR = {
							is_in_faction_with = VAT
							has_idea = VAT_symbolum_nicaeum
						}
					}
					VAT = {
						has_idea = VAT_symbolum_nicaeum
					}
				}
				every_country = {
					limit = {
						is_in_faction_with = VAT
						NOT = { has_idea = VAT_in_necessariis_unitas_1 }
						OR = {
							original_tag = ITA
							original_tag = FRA
							original_tag = POR
							original_tag = BEL
							original_tag = GER
							original_tag = LUX
							original_tag = HOL
							original_tag = IRE
							original_tag = AUS
							original_tag = HUN
							original_tag = CRO
							original_tag = SLV
							original_tag = POL
							original_tag = EST
							original_tag = LIT
							original_tag = LAT
							original_tag = CZE
							original_tag = SLO
							is_literally_spain = yes
						}
						is_left_ideology = no
					}
					add_ideas = VAT_in_necessariis_unitas_1
				}
			}
			if = {
				limit = {
					FROM = {
						OR = {
							is_in_faction_with = VAT
							has_idea = VAT_symbolum_nicaeum
						}
					}
					VAT = {
						has_idea = VAT_symbolum_nicaeum
					}
				}
				every_country = {
					limit = {
						is_in_faction_with = VAT
						NOT = { has_idea = VAT_in_necessariis_unitas_2 }
						capital_scope = { is_on_continent = europe }
						NOT = {
							original_tag = ITA
							original_tag = FRA
							original_tag = POR
							original_tag = BEL
							original_tag = GER
							original_tag = LUX
							original_tag = HOL
							original_tag = IRE
							original_tag = AUS
							original_tag = HUN
							original_tag = CRO
							original_tag = SLV
							original_tag = POL
							original_tag = EST
							original_tag = LIT
							original_tag = LAT
							original_tag = CZE
							original_tag = SLO
							is_literally_spain = yes
						}
						is_left_ideology = no
					}
					add_ideas = VAT_in_necessariis_unitas_2
				}
			}
		}
	}
	
#	on_monthly_FRF = {
#		effect = {
#			if = {
#				limit = {
#					has_game_rule = {
#						rule = trade_weapons
#						option = DEFAULT
#					}
#					check_variable = { global.total_infantry_weapons > 0 }
#					has_idea = FRF_use_global_market_idea
#				}
#				set_temp_variable = { inflation_rifles_for_fra = inflation_rifles }
#				divide_temp_variable = { inflation_rifles_for_fra = 10 }
#				round_temp_variable = inflation_rifles_for_fra
#				add_equipment_to_stockpile = {
#					type = infantry_equipment
#					amount = inflation_rifles_for_fra
#				}
#				log = "[GetDateText]: [This.GetName] ([This.GetTag]): ПОЛУЧИЛ ПЕХОТКИ С ЧЕРНОГО РЫНКА: [?inflation_rifles_for_fra]"
#			}
#		}
#	}
	
	#ROOT is the nation being liberated, FROM is the leader of the liberators. 
	on_liberate = {
		effect = {
			if = {
				limit = {
					OR = {
						has_global_flag = THE_MOTHER_OF_ORDER_FLAG
						has_global_flag = WORLD_OF_SPLIT_FLAG
					}
					NOT = { has_focus_tree = generic_focus }
				}
				load_focus_tree = { tree = generic_focus keep_completed = no }
			}
		}
		
		effect = {
			ROOT = { country_event = { id = TRpolitical.106 } }
			if = {
				limit = {
					tag = KAS
					has_cosmetic_tag = KAS_SIK
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = KUM
					has_cosmetic_tag = KUM_SIK
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = DZH
					has_cosmetic_tag = DZH_SIK
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = SYR
					has_cosmetic_tag = SYR_FRA
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = LEB
					has_cosmetic_tag = LEB_FR
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = SRL
					has_cosmetic_tag = SRL_ENG
					FROM = { original_tag = ENG }
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = BPL
					has_cosmetic_tag = BPL_ENG
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					tag = NFL
					has_cosmetic_tag = NFL_ENG
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					has_cosmetic_tag = BPL_technat_subject
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					has_cosmetic_tag = FIC_FRA
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					has_cosmetic_tag = CYP_UK
				}
				drop_cosmetic_tag = yes
			}
		}
	}
	
	#FROM is the nuked state. 
	on_nuke_drop = {
		#аннигиляция войск
		effect = {
			if = {
				limit = {
					NOT = {
						has_game_rule = {
							rule = nuclear_bomb_kill_army_status
							option = NUCLEAR_BOMB_KILL_ARMY_STATUS_OFF
						}
					}
				}
				every_country = { delete_unit = { state = FROM } }
				if = {
					limit = {
						has_game_rule = {
							rule = nuclear_bomb_kill_army_status
							option = NUCLEAR_BOMB_KILL_ARMY_STATUS_ON_HARD
						}
					}
					FROM = {
						every_neighbor_state = {
							every_country = { delete_unit = { state = PREV } }
						}
					}
				}
			}
		}
	}
	
	# scope is operative
	# FROM scope is the country 
	on_operative_created = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] on_operative_created"
			add_operative_nationalities = yes
		}
	}
	
	# This uses the UNIT LEADER sub scope of a character, FROM == country
	# FROM scope is the country // ROOT is unit leader
	on_unit_leader_created = {
		effect = {
			if = {
				limit = {
					FROM = { has_country_flag = guerrilla_war_flag }
				}
				add_unit_leader_trait = guerrilla_war_trait
			}
			if = {
				limit = {
					FROM = { has_country_flag = national_war_flag }
				}
				add_unit_leader_trait = national_war_trait
			}
			
			character = {
				if = { 
					limit = {
						is_army_leader = yes
					}
					if = {
						limit = {	
							FROM = { has_idea = army_wargames_spirit }
						}
						root = {
							random_list = {
								50 = { 
									random_list = {
										1 = { add_unit_leader_trait = organizer }
										1 = { add_unit_leader_trait = skilled_staffer }
									}
								}
								50 = {}
							}
						}
					}
					else_if = {
						limit = {	
							FROM = { has_idea = army_wargames_spirit }
						}
						root = {
							random_list = {
								60 = { 
									if = {
										limit = { has_tech = militia_tech }
										add_unit_leader_trait = militias_officer
									}
									else = {
										random_list = {
											1 = { add_unit_leader_trait = militias_officer }
											1 = { add_unit_leader_trait = irregulars_officer }
										}
									}
								}
								40 = {}
							}
						}
					}
					else_if = {
						limit = {	
							FROM = { has_idea = officers_initiative_spirit }
						}
						root = {
							random_list = {
								50 = { 
									random_list = {
										1 = { add_unit_leader_trait = trickster }
										1 = { add_unit_leader_trait = commando }
									}
								}
								50 = {}
							}
						}
					}
				}
			}
		}
		
		effect = {
			character = {
				if = {
					limit = {
						is_army_leader = yes
					}
				}
				else_if = {
					limit = {
						FROM = { has_idea = merchant_mariners_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
					}
					root = {
						random_list = {
							50 = { 
								add_unit_leader_trait = naval_lineage
							}
							50 = {}
						}
					}
				}
				else_if = {
					limit = {
						FROM = { has_idea = damage_control_training_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
					}
					root = {
						random_list = {
							50 = { 
								add_unit_leader_trait = chief_engineer
							}
							50 = {}
						}
					}
				}
				else_if = {
					limit = {
						FROM = { has_idea = traditionalism_naval_academy_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
					}
					root = {
						random_list = {
							50 = { 
								random_list = {
									50 = { add_attack = 1 }
									50 = { add_defense = 1 }
									50 = { add_maneuver = 1 }
									50 = { add_coordination = 1 }
								}
								random_list = {
									50 = { add_attack = 1 }
									50 = { add_defense = 1 }
									50 = { add_maneuver = 1 }
									50 = { add_coordination = 1 }
								}
							}
							50 = {}
						}
					}
				}
			}
		}
	}
	
	#FROM - Country (owner)
	#ROOT - leader
	#FROMFROM - original owner for exiled leaders
	on_unit_leader_level_up = {
		effect = {
			if = {
				limit = {
					FROM = {
						has_idea = officers_initiative_spirit 
					} 
				}
				character = {
					if = {
						limit = { is_army_leader = yes }
						random_list = {
							50 = {
								random_list = {
									1 = { add_attack = 1 }
									1 = { add_defense = 1 }
									1 = { add_planning = 1 }
									1 = { add_logistics = 1 }
								}
							}
							50 = {} 
						} 
					}
				}
			}
		}
	}
	
	on_nuke_drop = { 
		effect = { 
			if = { 
				limit = { NOT = { has_global_flag = first_nuke_dropped } }
				set_global_flag = first_nuke_dropped 
			}
		}
	}
	
	#ROOT is winner #FROM gets annexed - This will also fire on_annex
	on_civil_war_end = {
		effect = {
			FROM = {
				set_country_flag = from_civil_war
			}
			ROOT = { clr_country_flag = same_ideology_civil_war_flag }
			FROM = { clr_country_flag = same_ideology_civil_war_flag }
			if = {
				limit = { has_cosmetic_tag = TRO_cosmetic }
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					original_tag = PER
					has_global_flag = trworldnews_100_flag
				}
				clr_global_flag = trworldnews_100_flag
				delete_unit_template_and_units = { division_template = "Red Guards" disband = no }
				delete_unit_template_and_units = { division_template = "Persian Guards" disband = no }
			}
		}
	}
}